grammar Polak
  rule statement
    sequence
  end

  rule sequence
    first:sequenced_statement '; ' second:sequence {
      def to_ast
        Sequence.new(first.to_ast, second.to_ast)
      end
    }
    /
    sequenced_statement
  end

  rule sequenced_statement
    while / assign / if / do_nothing
  end

  rule while
    'dopoki (' condition:expression ') { ' body:statement ' }' {
      def to_ast
        While.new(condition.to_ast, body.to_ast)
      end
    }
  end

  rule assign
    'war ' name:[a-z]+ separator '=' separator expression {
      def to_ast
        Assign.new(name.text_value.to_sym, expression.to_ast)
      end
    }
  end

  rule if
    'jezeli (' condition:expression ') to { ' consequence:statement ' } albo { ' alternative:statement ' }' {
      def to_ast
        If.new(condition.to_ast, consequence.to_ast, alternative.to_ast)
      end
    }
  end

  rule do_nothing
    'nic-nie-rob' {
      def to_ast
        DoNothing.new
      end
    }
    /
    expression
  end

  rule expression
    less_than
  end

  rule less_than
    left:add ' < ' right:less_than {
      def to_ast
        LessThan.new(left.to_ast, right.to_ast)
      end
    }
    /
    add
  end

  rule add
    left:multiply ' + ' right:add {
      def to_ast
        Add.new(left.to_ast, right.to_ast)
      end
    }
    /
    multiply
  end

  rule multiply
    left:brackets ' * ' right:multiply {
      def to_ast
        Multiply.new(left.to_ast, right.to_ast)
      end
    }
    /
    brackets
  end

  rule brackets
    '(' expression ')' {
      def to_ast
        expression.to_ast
      end
    }
    /
    term
  end

  rule term
    number / boolean / variable
  end

  rule number
    [0-9]+ {
      def to_ast
        Number.new(text_value.to_i)
      end
    }
  end

  rule boolean
    ('true' / 'false') ![a-z] {
      def to_ast
        Boolean.new(text_value == 'true')
      end
    }
  end

  rule variable
    [a-z]+ {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule separator
    space / newline
  end

  rule space
    [\t\r\s]*
  end

  rule newline
    [\n]*
  end
end
