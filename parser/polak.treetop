grammar Polak
  rule statement
    sequence
  end

  rule sequence
    first:sequenced_statement '; ' second:sequence {
      def to_ast
        Sequence.new(first.to_ast, second.to_ast)
      end
    }
    /
    sequenced_statement
  end

  rule sequenced_statement
    assign / force_assign / if / function / do_nothing
  end

  rule assign
    'niech ' name:[a-z]+ space? '=' space? assignment_right_side {
      def to_ast
        Assign.new(name.text_value.to_sym, assignment_right_side.to_ast)
      end
    }
  end

  rule force_assign
    'niech! ' name:[a-z]+ space? '=' space? assignment_right_side {
      def to_ast
        ForceAssign.new(name.text_value.to_sym, assignment_right_side.to_ast)
      end
    }
  end

  rule assignment_right_side
    p_module / function / expression
  end

  rule if
    'jezeli (' condition:expression ') to { ' consequence:statement ' } albo { ' alternative:statement ' }' {
      def to_ast
        If.new(condition.to_ast, consequence.to_ast, alternative.to_ast)
      end
    }
  end

  rule p_module
    'modul {' sequence '}' {
      def to_ast
        PModule.new(sequence.to_ast)
      end
    }
  end

  rule parameter
    sequence {
      def value
        self.text_value
      end
    }
  end

  rule rest_parameters
    (("," space? parameter)*)
  end

  rule parameters_list
    parameter? rest_parameters {
      def value
        self.text_value.chomp.split(",")
      end
    }
  end

  rule function
    'f(' pl:parameters_list ') { ' body:statement ' }' {

      def to_ast
        Function.new(pl.value, body.to_ast)
      end
    }
  end


  rule do_nothing
    '...' {
      def to_ast
        DoNothing.new
      end
    }
    /
    expression
  end

  rule expression
    and
  end

  rule comparison_operator
    "==" /  ">=" / "<=" / ">" / "<"
  end

  rule additive_operator
    "+" / "-"
  end

  rule multitive_operator
    "*" / "/"
  end

  rule and
    left:comparison " i " right:comparison {
      def to_ast
        And.new(left.to_ast, right.to_ast)
      end
    }
    /
    or
  end

  rule or
    left:comparison " lub " right:comparison {
      def to_ast
        Or.new(left.to_ast, right.to_ast)
      end
    }
    /
    comparison
  end

  rule comparison
    left:additive ' ' comparison_operator ' ' right:comparison {
      def to_ast
        Comparison.new(comparison_operator.text_value.to_sym, left.to_ast, right.to_ast)
      end
    }
    /
    additive
  end

  rule additive
    left:multitive ' ' additive_operator ' ' right:additive {
      def to_ast
        Additive.new(additive_operator.text_value.to_sym, left.to_ast, right.to_ast)
      end
    }
    /
    multitive
  end

  rule multitive
    left:brackets ' ' multitive_operator ' ' right:multitive {
      def to_ast
        Multitive.new(multitive_operator.text_value.to_sym, left.to_ast, right.to_ast)
      end
    }
    /
    brackets
  end

  rule brackets
    '(' expression ')' {
      def to_ast
        expression.to_ast
      end
    }
    /
    term
  end

  rule term
    nil / is_nil / list / list_head / list_tail / pstring / number / boolean / function_call / variable
  end

  rule variable
    [a-z]+ {
      def to_ast
        Variable.new(text_value.to_sym)
      end
    }
  end

  rule parameter
    ([A-z]+) {
      def value
        self.text_value
      end
    }
  end

  rule list
    'Lista(' head:sequence "," tail:sequence ')' {
      def to_ast
        List.new(head.to_ast, tail.to_ast)
      end
    }
  end

  rule list_head
    'Lista.glowa(' s:sequence ')' {
      def to_ast
        ListHead.new(s.to_ast)
      end
    }
  end

  rule list_tail
    'Lista.ogon(' sequence ')' {
      def to_ast
        ListTail.new(sequence.to_ast)
      end
    }
  end

  rule nil
    '.' {
      def to_ast
        Nil.new
      end
    }
  end

  rule is_nil
    'Lista.koniec?(' sequence ')' {
      def to_ast
      puts sequence
        IsNil.new(sequence.to_ast)
      end
    }
  end

  rule pstring
    '"' ([^"\\] / "\\" . )* '"' {
      def to_ast
        PString.new(self.text_value)
      end
    }
  end

  rule number
    ('+' / '-')? [0-9]+ {
      def to_ast
        Number.new(text_value.to_i)
      end
    }
  end

  rule boolean
    ('prawda' / 'falsz') ![a-z] {
      def to_ast
        Boolean.new(text_value == 'prawda')
      end
    }
  end


  rule function_call
    name:[a-z]+ '(' e:(expression? ("," expression)*) ')' {

      def to_ast
        first = e.elements[0].to_ast rescue []

        actual ||= e.elements[1].elements.inject([first]) do |result, e|
          result << e.elements.last.to_ast
          result
        end.compact.flatten

        FunctionCall.new(name.text_value.to_sym, actual)
      end
    }
  end

  rule space
    [\t\r\s]*
  end
end
